# Generated by Django 3.2.4 on 2022-09-23 21:53

from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import epanel.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, verbose_name='email address')),
                ('phone_number', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(message="Die Telefonnummer muss in folgendem Format eingegeben werden: '+XX123456789' (bis zu 15 Zeichen)", regex='^\\+?1?\\d{9,15}$')])),
                ('owner', models.CharField(max_length=256)),
                ('street', models.CharField(max_length=512)),
                ('number', models.CharField(max_length=16)),
                ('parz', models.CharField(max_length=64)),
                ('city', models.CharField(max_length=64)),
                ('plz', models.CharField(max_length=5)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', epanel.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ResultCache',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jahr', models.IntegerField(validators=[django.core.validators.MinValueValidator(2018), django.core.validators.MaxValueValidator(2030)])),
                ('gek_strom', models.FloatField()),
                ('gek_strom_kosten', models.FloatField()),
                ('gek_waerme', models.FloatField()),
                ('gek_waerme_kosten', models.FloatField()),
                ('gek_total', models.FloatField()),
                ('gek_total_kosten', models.FloatField()),
                ('bauart', models.CharField(max_length=256)),
                ('ebf', models.IntegerField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Zwischenspeicher zum Datenvergleich',
                'verbose_name_plural': 'Zwischenspeicher zum Datenvergleich',
            },
        ),
        migrations.CreateModel(
            name='EnergyByYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jahr', models.IntegerField(validators=[django.core.validators.MinValueValidator(2018), django.core.validators.MaxValueValidator(2030)])),
                ('bedarf_heizoel', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20000)])),
                ('bedarf_gas', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200000)])),
                ('bedarf_strom', models.IntegerField(validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(100000)])),
                ('bedarf_holz', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20000)])),
                ('bedarf_holz_hackschnitzel', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(20000.0)])),
                ('bedarf_holzpellets', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20000)])),
                ('bedarf_fernwärme_heizstrom', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000)])),
                ('kosten_heizoel', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20000)])),
                ('kosten_gas', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20000)])),
                ('kosten_strom', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20000)])),
                ('kosten_holz', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20000)])),
                ('kosten_fernwärme', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20000)])),
                ('kosten_andere', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20000)])),
                ('eigenstrom_jahresertrag', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50000)])),
                ('eigenstrom_netzeinspeisung', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50000)])),
                ('eigenstrom_netzeinspeisung_ertrag', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Energiedaten nach Jahr',
                'verbose_name_plural': 'Energiedaten nach Jahr',
            },
        ),
        migrations.CreateModel(
            name='BuildingData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gebaeudeart', models.CharField(choices=[('EINFAMILIENHAUS', 'Einfamilienhaus'), ('2FAMILIENHAUS', 'Zweifamilienhaus'), ('WOHNGEBAEUDE_3_WOHNEINHEITEN', 'Wohngebäude bis 3 Wohneinheiten'), ('FREIE_EINGABE', 'Freie Eingabe (bitte Eintragen)')], max_length=256)),
                ('gebaeudeart_freie_eingabe', models.CharField(blank=True, max_length=256, null=True)),
                ('bauart', models.CharField(choices=[('FREISTEHEND', 'freistehendes Haus'), ('ECKHAUS', 'Eckhaus'), ('REIHENHAUS', 'Reihenhaus')], max_length=256)),
                ('energiebezugsflaeche', models.PositiveIntegerField(default=200, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(600)])),
                ('baujahr', models.PositiveIntegerField(default=1950, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)])),
                ('sanierung_dach', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1980), django.core.validators.MaxValueValidator(2030)])),
                ('sanierung_aussenwaende', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1980), django.core.validators.MaxValueValidator(2030)])),
                ('sanierung_fenster', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1980), django.core.validators.MaxValueValidator(2030)])),
                ('sanierung_kellerdecken', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1980), django.core.validators.MaxValueValidator(2030)])),
                ('sanierung_anderes', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1980), django.core.validators.MaxValueValidator(2030)])),
                ('sanierung_anderes_erklaerung', models.CharField(blank=True, max_length=1000, null=True)),
                ('baujahr_gebaeudeheizung', models.IntegerField(default=-1, validators=[django.core.validators.MinValueValidator(1980), django.core.validators.MaxValueValidator(2030)])),
                ('baujahr_warmwasseraufbereitung', models.IntegerField(default=-1, validators=[django.core.validators.MinValueValidator(1980), django.core.validators.MaxValueValidator(2030)])),
                ('heizwaerme_erzeugung_1', models.CharField(choices=[('HEIZOEL', 'Heizöl'), ('GAS', 'Gas'), ('HOLZ', 'Holz'), ('STROM', 'Strom'), ('FLUESSIGGAS', 'Flüssiggas'), ('SONNE', 'Sonne'), ('SONSTIGES', 'Sonstiges (bitte angeben)')], default='HEIZOEL', max_length=32)),
                ('heizwaerme_erzeugung_1_sonstiges', models.CharField(blank=True, max_length=128, null=True)),
                ('heizwaerme_erzeugung_2', models.CharField(blank=True, choices=[('NONE', 'keine'), ('HEIZOEL', 'Heizöl'), ('GAS', 'Gas'), ('HOLZ', 'Holz'), ('STROM', 'Strom'), ('FLUESSIGGAS', 'Flüssiggas'), ('SONNE', 'Sonne'), ('SONSTIGES', 'Sonstiges (bitte angeben)')], default='NONE', max_length=32, null=True)),
                ('heizwaerme_erzeugung_2_sonstiges', models.CharField(blank=True, max_length=128, null=True)),
                ('heizwaerme_erzeugung_3', models.CharField(blank=True, choices=[('NONE', 'keine'), ('HEIZOEL', 'Heizöl'), ('GAS', 'Gas'), ('HOLZ', 'Holz'), ('STROM', 'Strom'), ('FLUESSIGGAS', 'Flüssiggas'), ('SONNE', 'Sonne'), ('SONSTIGES', 'Sonstiges (bitte angeben)')], default='NONE', max_length=32, null=True)),
                ('heizwaerme_erzeugung_3_sonstiges', models.CharField(blank=True, max_length=128, null=True)),
                ('warmwasseraufbereitung_1', models.CharField(choices=[('HEIZOEL', 'Heizöl'), ('GAS', 'Gas'), ('HOLZ', 'Holz'), ('STROM', 'Strom'), ('FLUESSIGGAS', 'Flüssiggas'), ('SONNE', 'Sonne'), ('SONSTIGES', 'Sonstiges (bitte angeben)')], default='HEIZOEL', max_length=32)),
                ('warmwasseraufbereitung_1_sonstiges', models.CharField(blank=True, max_length=128, null=True)),
                ('warmwasseraufbereitung_2', models.CharField(blank=True, choices=[('NONE', 'keine'), ('HEIZOEL', 'Heizöl'), ('GAS', 'Gas'), ('HOLZ', 'Holz'), ('STROM', 'Strom'), ('FLUESSIGGAS', 'Flüssiggas'), ('SONNE', 'Sonne'), ('SONSTIGES', 'Sonstiges (bitte angeben)')], default='NONE', max_length=32, null=True)),
                ('warmwasseraufbereitung_2_sonstiges', models.CharField(blank=True, max_length=128, null=True)),
                ('warmwasseraufbereitung_3', models.CharField(blank=True, choices=[('NONE', 'keine'), ('HEIZOEL', 'Heizöl'), ('GAS', 'Gas'), ('HOLZ', 'Holz'), ('STROM', 'Strom'), ('FLUESSIGGAS', 'Flüssiggas'), ('SONNE', 'Sonne'), ('SONSTIGES', 'Sonstiges (bitte angeben)')], default='NONE', max_length=32, null=True)),
                ('warmwasseraufbereitung_3_sonstiges', models.CharField(blank=True, max_length=128, null=True)),
                ('leistung_waermeerzeuger', models.PositiveIntegerField(default=20, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)])),
                ('waermeabgabe', models.CharField(choices=[('HEIZKOERPER', 'Heizkörper'), ('FUSSBODENHEIZUNG', 'Fußbodenheizung'), ('FUSSBODENHEIZUNG_HEIZKOERPER', 'Heizkörper & Fußbodenheizung'), ('SONST_FLAECHENHEIZUNG', 'sonstige Flächenheizung'), ('SONSTIGES', 'Sonstiges (bitte angeben)')], default='HEIZKOERPER', max_length=32)),
                ('waermeabgabe_sonstiges', models.CharField(blank=True, max_length=128, null=True)),
                ('regelung_waermeabgabe', models.CharField(choices=[('THERMOSTATVENTILE', 'Thermostatventile'), ('MANUELLE_VENTILE', 'manuelle Ventile'), ('THERMOSTAT_MANUELLE_VENTILE', 'Thermostatventile & manuelle Ventile'), ('STELLANTRIEBE', 'Stellantriebe'), ('STELLANTRIEBE_RAUMTEMP_REGELUNG', 'Stellantriebe mit Raumtemperaturregelung'), ('SONSTIGES', 'Sonstiges (bitte angeben)')], default='THERMOSTATVENTILE', max_length=32)),
                ('regelung_waermeabgabe_sonstiges', models.CharField(blank=True, max_length=128, null=True)),
                ('brauchwarmwasserzirkulation', models.CharField(choices=[('JA', 'Ja (vorhanden)'), ('NEIN', 'Nein (nicht vorhanden)'), ('NICHT_BEKANNT', 'nicht bekannt')], default='NICHT_BEKANNT', max_length=32)),
                ('brauchwarmwasser_speicher_inhalt', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(500)])),
                ('art_eigenstromanlage', models.CharField(choices=[('KEINE', 'keine'), ('PV', 'Photovoltaik'), ('SONSTIGES', 'Sonstiges (bitte angeben)')], default='NONE', max_length=64)),
                ('art_eigenstromanlage_sonstiges', models.CharField(blank=True, max_length=128, null=True)),
                ('peak_leistung_eigenstromanlage', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(50.0)])),
                ('kapazitaet_batteriespeicher', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10000.0)])),
                ('investition_waermeerzeugung', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000)])),
                ('investition_warmwasseraufbereitung', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000)])),
                ('investition_eigenstromproduktion_batteriespeicher', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200000)])),
                ('investition_sanierung_gebaeudehuelle', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(500000)])),
                ('investition_andere', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(500000)])),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Gebäudedaten ohne Energie',
                'verbose_name_plural': 'Gebäudedaten ohne Energie',
            },
        ),
        migrations.AddConstraint(
            model_name='resultcache',
            constraint=models.UniqueConstraint(fields=('user', 'jahr'), name='unique resultcache per user and year'),
        ),
        migrations.AddConstraint(
            model_name='energybyyear',
            constraint=models.UniqueConstraint(fields=('user', 'jahr'), name='unique year per user'),
        ),
    ]
